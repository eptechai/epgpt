# name: Docker Image CI

# # This workflow uses actions that are not certified by GitHub.
# # They are provided by a third-party and are governed by
# # separate terms of service, privacy policy, and support
# # documentation.

# on:
#   push:
#     branches: [ "stg" ]
#     # Publish semver tags as releases.
#     tags: [ 'v*.*.*' ]
#   pull_request:
#     branches: [ "stg" ]

# env:
#   # Use docker.io for Docker Hub if empty
#   REGISTRY: ghcr.io
#   # github.repository as <account>/<repo>
#   IMAGE_NAME: ${{ github.repository }}


# jobs:
#   build:

#     runs-on: ubuntu-latest
#     environment: ${{ github.ref_name }}

#     strategy:
#       matrix:
#         subrepo: ["1_frontend", "1_backend", "2_svc_vectordb", "3_model", "3_conversation_index"]

#     permissions:
#       contents: read
#       packages: write
#       # This is used to complete the identity challenge
#       # with sigstore/fulcio when running outside of PRs.
#       id-token: write

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       # Install the cosign tool except on PR
#       # https://github.com/sigstore/cosign-installer
#       - name: Install cosign
#         if: github.event_name != 'pull_request'
#         uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
#         with:
#           cosign-release: 'v2.1.1'

#       # Set up BuildKit Docker container builder to be able to build
#       # multi-platform images and export cache
#       # https://github.com/docker/setup-buildx-action
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

#       # Login against a Docker registry except on PR
#       # https://github.com/docker/login-action
#       - name: Log into registry ${{ env.REGISTRY }}
#         if: github.event_name != 'pull_request'
#         uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       # Extract metadata (tags, labels) for Docker
#       # https://github.com/docker/metadata-action
#       - name: Extract Docker metadata
#         id: meta
#         uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.subrepo }}

#       # Build and push Docker image with Buildx (don't push on PR)
#       # https://github.com/docker/build-push-action
#       - name: Build and push Docker image
#         id: build-and-push
#         uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
#         with:
#           context: ${{ matrix.subrepo }}
#           push: ${{ github.event_name != 'pull_request' }}
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha,scope=${{ github.ref_name }}-${{ matrix.subrepo }}
#           cache-to: type=gha,mode=min,scope=${{ github.ref_name }}-${{ matrix.subrepo }}

#       # Sign the resulting Docker image digest except on PRs.
#       # This will only write to the public Rekor transparency log when the Docker
#       # repository is public to avoid leaking data.  If you would like to publish
#       # transparency data even for private images, pass --force to cosign below.
#       # https://github.com/sigstore/cosign
#       - name: Sign the published Docker image
#         if: ${{ github.event_name != 'pull_request' }}
#         env:
#           # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
#           TAGS: ${{ steps.meta.outputs.tags }}
#           DIGEST: ${{ steps.build-and-push.outputs.digest }}
#         # This step uses the identity token to provision an ephemeral certificate
#         # against the sigstore community Fulcio instance.
#         run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
#   terraform:
#     name: 'Terraform'
#     runs-on: ubuntu-latest
#     environment: ${{ github.ref_name }}
#     needs: build

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash
#         working-directory: ./0_terraform/${{ github.ref_name }}

#     steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v3

#     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v2
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       run: terraform init

#     # Checks that all Terraform configuration files adhere to a canonical format
#     - name: Terraform Format
#       run: terraform fmt -check

#     # Generates an execution plan for Terraform
#     - name: Terraform Plan
#       run: terraform plan -input=false

#       # On push to "stg", build or change infrastructure according to Terraform configuration files
#       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#     - name: Terraform Apply
#       if: github.ref == 'refs/heads/"stg"' && github.event_name == 'push'
#       run: terraform apply -auto-approve -input=false